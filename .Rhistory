diamonds
ggplot(diamonds, aes(x = price, y = carat, color = cut)) +
geom_boxplot(mapping = aes(group = cut_width(price, 1000))) + theme_bw()
ggplot(diamonds, aes(x = price, y = carat, fill = cut)) +
geom_boxplot(mapping = aes(group = cut_width(price, 1000))) + theme_bw()
ggplot(diamonds, aes(x = price, y = carat, fill = cut)) +
geom_boxplot() + theme_bw()
ggplot(diamonds, aes(x = cut_number(price,8), y = carat, fill = cut)) +
geom_boxplot() + theme_bw()
ggplot(diamonds, aes(x = cut_number(price,5), y = carat, fill = cut)) +
geom_boxplot() + theme_bw()
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
ggplot(data = diamonds) +
geom_hex(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
# Chunk 1: setup
knitr::opts_chunk$set(message = FALSE)
knitr::opts_chunk$set(warning = FALSE)
# Chunk 2
library(nycflights13)
library(tidyverse)
# Chunk 4
sqrt(2)^2 == 2
near(sqrt(2)^2, 2)
# Chunk 5
nov_dec <- filter(flights, month == 11 | month == 12)
nov_dec <- filter(flights, month %in% c(11, 12))
# Chunk 6
df <- tibble(x = c(1, NA, 3))
filter(df, is.na(x) | x > 1)
# Chunk 7
delay <- filter(flights, arr_delay >=120)
summary(delay$arr_delay)
# Chunk 8
houston <- filter(flights, dest %in% c("IAH", "HOU"))
table(houston$dest)
# Chunk 9
airlines_filt <- filter(flights, carrier %in% c("UA", "AA", "DL"))
table(airlines_filt$carrier)
# Chunk 10
summer <- filter(flights, month %in% c(7,8,9))
table(summer$month)
# Chunk 11
arrdelay <- filter(flights, dep_delay <=0 & arr_delay > 120)
arrdelay
# Chunk 12
makeup <- filter(flights, dep_delay >= 60 & (arr_delay < dep_delay - 30))
# Chunk 13
morning <- filter(flights, dep_time >= 0 & dep_time <= 600)
summary(morning$dep_time)
# Chunk 14
summer <- filter(flights, between(month, 7, 9))
morning <- filter(flights, between(dep_time, 0, 600))
# Chunk 15
missing_dep <- filter(flights, is.na(dep_time))
missing_dep
# Chunk 16
arrange(flights, year, month, day)
# Chunk 17
arrange(flights, desc(dep_delay))
# Chunk 18
df <- tibble(x = c(5, 2, NA))
arrange(df, x)
# Chunk 19
df <- tibble(x = c(5, 2, NA))
arrange(df, desc(is.na(x)))
# Chunk 20
arrange(flights, desc(dep_delay), dep_time)
# Chunk 21
arrange(flights, air_time)
# Chunk 22
arrange(flights, distance)
# Chunk 23
arrange(flights, desc(distance))
# Chunk 24
# Select columns by name
select(flights, year, month, day)
# Select all columns between year and day (inclusive)
select(flights, year:day)
# Select all columns except those from year to day (inclusive)
select(flights, -(year:day))
# Chunk 25
# moves time_hour and air_time to the front of the tibble
select(flights, time_hour, air_time, everything())
# Chunk 26
rename(flights, tail_num = tailnum)
# Chunk 27
select(flights, dep_time, dep_delay, arr_time, arr_delay)
select(flights, starts_with("dep"), starts_with("arr"))
select(flights, c(4,6,7,9))
# Chunk 28
select(flights, year, year, day, year)
# Chunk 29
vars <- c("year", "month", "day", "dep_delay", "arr_delay")
select(flights, one_of(vars))
# Chunk 30
select(flights, contains("TIME"))
# Chunk 31
select(flights, contains("TIME", ignore.case = FALSE))
# Chunk 32
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# Chunk 33
transmute(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60,
hours = air_time / 60,
gain_per_hour = gain / hours
)
# Chunk 34
flights_sml <- select(flights, contains("dep"))
mutate(flights_sml,
dep_min_since_midn = (dep_time %/% 100) * 60 + (dep_time %% 100),
sched_dep_min_since_midn = (sched_dep_time %/% 100) * 60 + (sched_dep_time %% 100))
# Chunk 35
mutate(select(flights, arr_time, dep_time, air_time),
tot_time = arr_time - dep_time)
# Chunk 36
mutate(select(flights, dep_time, arr_time, air_time),
dep_cont = (dep_time %/% 100)* 60 + (dep_time %% 100),
arr_cont = (arr_time %/% 100) * 60 + (arr_time %% 100),
tot_time = arr_cont - dep_cont)
# Chunk 37
dep <- select(flights, dep_time, sched_dep_time, dep_delay)
mutate(dep,
dep_cont = (dep_time %/% 100)* 60 + (dep_time %% 100),
sched_dep_cont = (sched_dep_time %/% 100)* 60 + (sched_dep_time %% 100),
calc_dep_delay = dep_cont - sched_dep_cont)
# Chunk 38
delay <- select(flights, arr_delay)
arrange(mutate(delay,
delay_rank = min_rank(arr_delay)), desc(delay_rank))
# Chunk 39
1:3 + 1:10
# Chunk 40
by_day <- group_by(flights, year, month, day)
summarise(by_day, delay = mean(dep_delay, na.rm = TRUE))
# Chunk 41
# by destination, count the number of flights, mean distance, and mean arrival delay.
## only use locations with more than 20 flights that are not HNL.
delays <- flights %>%
group_by(dest) %>%
summarise(
count = n(),
dist = mean(distance, na.rm = TRUE),
delay = mean(arr_delay, na.rm = TRUE)
) %>%
filter(count > 20, dest != "HNL")
# Chunk 42
not_cancelled <- flights %>%
filter(!is.na(dep_delay), !is.na(arr_delay))
# sums total number of miles a given plane flew
not_cancelled %>%
count(tailnum, wt = distance)
# Chunk 43
not_cancelled %>%
group_by(carrier, flight) %>%
summarise(count = n(),
m_delay = mean(arr_delay, na.rm = TRUE),
sd_delay = sd(arr_delay, na.rm = TRUE)) %>%
filter(count > 25) %>%
ggplot(mapping = aes(x = m_delay, y = sd_delay)) +
geom_point(alpha = 0.5) + theme_bw()
# Chunk 44
not_cancelled %>%
group_by(carrier, flight) %>%
summarise(count = n(),
m_delay = mean(dep_delay, na.rm = TRUE),
sd_delay = sd(dep_delay, na.rm = TRUE)) %>%
filter(count > 25) %>%
ggplot(mapping = aes(x = m_delay, y = sd_delay)) +
geom_point(alpha = 0.5) + theme_bw()
# Chunk 45
# number of flights by destination
not_cancelled %>%
group_by(dest) %>%
summarise(count = n())
# total number of miles by plane
not_cancelled %>%
group_by(tailnum) %>%
summarise(tot_mi = sum(distance, na.rm = TRUE))
# Chunk 46
flights %>%
group_by(month, day) %>%
summarise(count = n(),
cancelled = sum(is.na(arr_delay)),
mean_delay = mean(arr_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = cancelled, y = mean_delay)) +
geom_point(alpha = 0.5) + theme_bw() + geom_smooth(se = FALSE)
# Chunk 47
flights %>%
group_by(carrier, dest) %>%
summarise(count = n(),
mean_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
flights %>%
group_by(dest) %>%
summarise(count = n(),
mean_delay = mean(arr_delay, na.rm = TRUE)) %>%
arrange(desc(mean_delay))
# Chunk 48
flights  %>%
mutate(canceled = is.na(arr_time),
late = !canceled & arr_delay > 0) %>%
filter(canceled == FALSE) %>%
group_by(tailnum) %>%
summarise(count = n(),
n_delay = sum(late, na.rm = TRUE),
prop_delay = n_delay/count) %>%
mutate(prop_rank = min_rank(desc(prop_delay))) %>%
filter(count > 5) %>%
arrange(prop_rank)
# Chunk 49
flights %>%
group_by(hour) %>%
summarise(avg_delay = mean(dep_delay, na.rm = TRUE)) %>%
ggplot(aes(x = hour, y = avg_delay)) + geom_bar(stat = "identity") + theme_bw()
# Chunk 50
flights %>%
filter(!is.na(arr_delay), arr_delay > 0) %>%
group_by(dest) %>%
mutate(total_delay = sum(arr_delay),
prop_delay = arr_delay / total_delay) %>%
select(flight, dest, total_delay, prop_delay)
# Chunk 51
flights %>%
arrange(origin, month, day, dep_time) %>% # arrange in order
group_by(origin) %>% # group by airport to avoid cross-airport comparisons
mutate(prev_delay = lag(dep_delay)) %>% # create lagged delay column
group_by(dep_delay) %>% # otherwise, they'll have the same value -- this preserves lag
summarise(m_prev_delay = mean(prev_delay, na.rm = TRUE)) %>% # find mean delay for previous flight
ggplot(aes(dep_delay, m_prev_delay)) + geom_point() + theme_bw() + xlab("Current Flight Delay") + ylab("Prev Flight Delay")
# Chunk 52
flights %>%
group_by(origin, dest) %>%
mutate(med_air_time = median(air_time, na.rm = TRUE)) %>%
select(month, day, flight, origin, dest, air_time, med_air_time) %>%
mutate(diff = air_time - med_air_time) %>%
arrange(diff)
# Chunk 53
flights %>%
group_by(origin, dest) %>%
mutate(med_air_time = median(air_time, na.rm = TRUE)) %>%
select(month, day, flight, origin, dest, air_time, med_air_time) %>%
mutate(diff = air_time - med_air_time) %>%
arrange(desc(diff))
# Chunk 54
airports_carriers <- flights %>%
group_by(dest) %>%
summarise(n_carriers = n_distinct(carrier)) %>%
filter(n_carriers > 2) %>%
arrange(n_carriers)
flights %>%
filter(dest %in% airports_carriers$dest) %>%
group_by(carrier) %>%
summarise(n_dest = n_distinct(dest)) %>%
arrange(desc(n_dest))
# Chunk 55
flights %>%
filter(!is.na(air_time)) %>%
arrange(tailnum, month, day, dep_time) %>%
mutate(one_hour = ifelse(dep_delay > 60, 1,0)) %>%
group_by(tailnum) %>%
mutate(cumsum = cumsum(one_hour)) %>%
filter(cumsum == 0) %>%
summarise(count = n())
# Chunk 56
ggplot(data = diamonds) + geom_bar(mapping = aes(x = cut)) + theme_bw()
# Chunk 57
ggplot(data = diamonds) + geom_histogram(mapping = aes(x = carat), binwidth = 0.5) + theme_bw()
# Chunk 58
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat, colour = cut)) +
geom_freqpoly(binwidth = 0.1) + theme_bw()
# Chunk 59
library(gridExtra)
x <- ggplot(diamonds, aes(x)) + geom_histogram() + theme_bw()
y <- ggplot(diamonds, aes(y)) + geom_histogram() + theme_bw()
z <- ggplot(diamonds, aes(z)) + geom_histogram() + theme_bw()
grid.arrange(x,y,z,ncol=1)
# Chunk 60
ggplot(diamonds, aes(price)) + geom_histogram() + theme_bw()
# Chunk 61
ggplot(diamonds, aes(price)) + geom_histogram(binwidth = 10) + theme_bw()
# Chunk 62
lessthanthreek <- filter(diamonds, price < 3000)
ggplot(lessthanthreek, aes(price)) + geom_histogram(binwidth = 10) + theme_bw()
# Chunk 63
diamonds %>%
filter(carat == 0.99 | carat == 1) %>%
group_by(carat) %>%
summarise(count = n())
# Chunk 64
ggplot(diamonds, aes(price)) + geom_histogram() + theme_bw() + coord_cartesian(xlim = c(200, 1000))
ggplot(diamonds, aes(price)) + geom_histogram() + theme_bw() + xlim(200, 1000)
# Chunk 65
mis_diamonds <- diamonds %>%
mutate(price_miss = ifelse(price > 750 & price < 1900, NA, price))
ggplot(mis_diamonds, aes(price_miss)) + geom_histogram(binwidth = 10) + theme_bw()
# Chunk 66
mis_diamonds <- diamonds %>%
mutate(color_miss = ifelse(color == "H", NA, as.character(color)))
ggplot(mis_diamonds, aes(as.factor(color_miss))) + geom_bar() + xlab("Color") + theme_bw()
# Chunk 67
ggplot(data = mpg) +
geom_boxplot(mapping = aes(x = reorder(class, hwy, FUN = median), y = hwy)) + theme_bw() + xlab("car type")
# Chunk 68
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
# Chunk 69
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
library(hexbin)
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
# Chunk 70
flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(cancelled, sched_dep_time)) + geom_boxplot() + theme_bw()
# Chunk 71
ggplot(diamonds, aes(cut, carat)) + geom_boxplot() + theme_bw()
# Chunk 72
library(ggstance)
ggplot(diamonds, aes(carat, cut)) + geom_boxploth() + theme_bw()
ggplot(diamonds, aes(cut, carat)) + geom_boxplot() + theme_bw() + coord_flip()
# Chunk 73
library(lvplot)
ggplot(diamonds, aes(cut, price)) + geom_lv(aes(fill=..LV..)) + theme_bw() + scale_fill_lv()
# Chunk 74
ggplot(diamonds, aes(cut, price)) + geom_violin() + theme_bw()
# Chunk 75
ggplot(diamonds, aes(cut, price)) + geom_violin() + theme_bw()
ggplot(diamonds, aes(price)) + geom_histogram() + theme_bw() + facet_wrap(~cut)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(colour = cut), binwidth = 500) + theme_bw()
# Chunk 76
# cut within color
diamonds %>%
count(color, cut) %>%
group_by(color) %>%
mutate(prop = n / sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop))
# color within cut
diamonds %>%
count(color, cut) %>%
group_by(cut) %>%
mutate(prop = n / sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop))
# Chunk 77
flights %>%
group_by(dest, month) %>%
summarise(m_delay = mean(arr_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = dest, y = month)) +
geom_tile(mapping = aes(fill = m_delay))
# Chunk 78
flights %>%
group_by(dest) %>%
mutate(n_flights = n()) %>%
filter(n_flights > 15) %>%
group_by(dest, month) %>%
summarise(m_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(delay_bin = ifelse(m_delay < 0, "Early",
ifelse(m_delay > 0 & m_delay < 30, "0-30 min late",
ifelse(m_delay >30 & m_delay < 60, "30-60 min late",
ifelse(m_delay >  60, "90 min late", NA))))) %>%
mutate(delay_bin = factor(delay_bin, levels = c("Early", "0-30 min late", "30-60 min late", "90 min late"))) %>%
ggplot(mapping = aes(x = as.factor(month), y = dest)) +
geom_tile(mapping = aes(fill = delay_bin)) + scale_fill_brewer(direction = 1) + xlab("Month")
# Chunk 79
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = cut, y = color)) +
geom_tile(mapping = aes(fill = n))
# Chunk 80
ggplot(data = diamonds,
mapping = aes(color = cut_number(carat, 5), x = price)) +
geom_freqpoly() + theme_bw()
# Chunk 81
ggplot(data = diamonds,
mapping = aes(color = cut_width(carat, 1), x = price)) +
geom_freqpoly() + theme_bw()
# Chunk 82
ggplot(diamonds, aes(x = price, y = carat)) +
geom_boxplot(mapping = aes(group = cut_width(price, 1000))) + theme_bw()
# Chunk 83
ggplot(diamonds, aes(x = cut_number(price,5), y = carat, fill = cut)) +
geom_boxplot() + theme_bw()
# Chunk 84
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
# Chunk 85
ggplot(data = diamonds) +
geom_hex(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
nycflights13::flights %>%
print(n = 10, width = Inf)
mtcars
tibble(mtcars)
as.tibble(mtcars)
df <- data.frame(abc = 1, xyz = "a")
df <- data.frame(abc = 1, xyz = "a")
df_tibble <- tibble(abc = 1, xyz = "a")
df
df_tibble
df$x
df_tibble$xyz
df_tibble$x
df[, "xyz"]
df_tibble[, "xyz"]
df[, c("abc", "xyz")]
df_tibble[, c("abc", "xyz")]
df_tibble[, "xyz"]
class(df_tibble[, "xyz"])
class(df[, "xyz"])
class(df_tibble[, "xyz"])
class(df_tibble[, c("abc", "xyz")])
mtcars
var <- "mpg"
mtcars %>% .$var
mtcars %>% .[[var]]
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
annoying$`1`
annoying %>%
ggplot(aes(`1`, `2`)) + geom_point()
annoying %>%
mutate(`3` = `2`/`1`)
annoying <- annoying %>%
mutate(`3` = `2`/`1`)
names(annoying) <- c("one", "two", "three")
annoying
?enframe()
?tibble
?print.tbl
?read_delim
?read_fwf()
quotes <- read_csv("x,y\n1,'a,b'", quote = "'")
View(quotes)
read_csv("x,y\n1,'a,b'", quote = "'")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv("a,b\n1,2\na,b")
?locale
parse_number("123,456,789", locale = locale(grouping_mark = ",", decimal_mark = ","))
parse_number("123,456,789", locale = locale(decimal_mark = ","))
parse_number("123,456,789", locale = locale(decimal_mark = "."))
vignette("locales")
str(parse_guess("01/02/2013", locale = locale(date_format = "%d/%m/%Y")))
?read_csv
read_csv2("a;b\n1,0;2,0")
parse_number("123,456,789", locale = locale(decimal_mark = "."))
read_csv2("a;b\n1,0;2,0")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, "%B %d, %Y")
parse_date(d2, "%Y-%b-%d")
parse_date(d3, "%d-%b-%Y")
parse_date(d4, "%B %d (%Y)")
parse_date(d5, "%m/%d/%y")
parse_time(t1, "%H%M")
parse_time(t2, "%I:%M:%OS %p")
