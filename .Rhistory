mutate(prop = n / sum(n)) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = prop))
# Chunk 77
flights %>%
group_by(dest, month) %>%
summarise(m_delay = mean(arr_delay, na.rm = TRUE)) %>%
ggplot(mapping = aes(x = dest, y = month)) +
geom_tile(mapping = aes(fill = m_delay))
# Chunk 78
flights %>%
group_by(dest) %>%
mutate(n_flights = n()) %>%
filter(n_flights > 15) %>%
group_by(dest, month) %>%
summarise(m_delay = mean(arr_delay, na.rm = TRUE)) %>%
mutate(delay_bin = ifelse(m_delay < 0, "Early",
ifelse(m_delay > 0 & m_delay < 30, "0-30 min late",
ifelse(m_delay >30 & m_delay < 60, "30-60 min late",
ifelse(m_delay >  60, "90 min late", NA))))) %>%
mutate(delay_bin = factor(delay_bin, levels = c("Early", "0-30 min late", "30-60 min late", "90 min late"))) %>%
ggplot(mapping = aes(x = as.factor(month), y = dest)) +
geom_tile(mapping = aes(fill = delay_bin)) + scale_fill_brewer(direction = 1) + xlab("Month")
# Chunk 79
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = cut, y = color)) +
geom_tile(mapping = aes(fill = n))
# Chunk 80
ggplot(data = diamonds,
mapping = aes(color = cut_number(carat, 5), x = price)) +
geom_freqpoly() + theme_bw()
# Chunk 81
ggplot(data = diamonds,
mapping = aes(color = cut_width(carat, 1), x = price)) +
geom_freqpoly() + theme_bw()
# Chunk 82
ggplot(diamonds, aes(x = price, y = carat)) +
geom_boxplot(mapping = aes(group = cut_width(price, 1000))) + theme_bw()
# Chunk 83
ggplot(diamonds, aes(x = cut_number(price,5), y = carat, fill = cut)) +
geom_boxplot() + theme_bw()
# Chunk 84
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
# Chunk 85
ggplot(data = diamonds) +
geom_hex(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
tribble(
~x, ~y, ~z,
#--|--|----
"a", 2, 3.6,
"b", 1, 8.5
)
nycflights13::flights %>%
print(n = 10, width = Inf)
mtcars
tibble(mtcars)
as.tibble(mtcars)
df <- data.frame(abc = 1, xyz = "a")
df <- data.frame(abc = 1, xyz = "a")
df_tibble <- tibble(abc = 1, xyz = "a")
df
df_tibble
df$x
df_tibble$xyz
df_tibble$x
df[, "xyz"]
df_tibble[, "xyz"]
df[, c("abc", "xyz")]
df_tibble[, c("abc", "xyz")]
df_tibble[, "xyz"]
class(df_tibble[, "xyz"])
class(df[, "xyz"])
class(df_tibble[, "xyz"])
class(df_tibble[, c("abc", "xyz")])
mtcars
var <- "mpg"
mtcars %>% .$var
mtcars %>% .[[var]]
annoying <- tibble(
`1` = 1:10,
`2` = `1` * 2 + rnorm(length(`1`))
)
annoying$`1`
annoying %>%
ggplot(aes(`1`, `2`)) + geom_point()
annoying %>%
mutate(`3` = `2`/`1`)
annoying <- annoying %>%
mutate(`3` = `2`/`1`)
names(annoying) <- c("one", "two", "three")
annoying
?enframe()
?tibble
?print.tbl
?read_delim
?read_fwf()
quotes <- read_csv("x,y\n1,'a,b'", quote = "'")
View(quotes)
read_csv("x,y\n1,'a,b'", quote = "'")
read_csv("a,b\n1,2,3\n4,5,6")
read_csv("a,b,c\n1,2\n1,2,3,4")
read_csv("a,b\n\"1")
read_csv("a,b\n1,2\na,b")
read_csv("a;b\n1;3")
read_csv("a,b\n1,2\na,b")
?locale
parse_number("123,456,789", locale = locale(grouping_mark = ",", decimal_mark = ","))
parse_number("123,456,789", locale = locale(decimal_mark = ","))
parse_number("123,456,789", locale = locale(decimal_mark = "."))
vignette("locales")
str(parse_guess("01/02/2013", locale = locale(date_format = "%d/%m/%Y")))
?read_csv
read_csv2("a;b\n1,0;2,0")
parse_number("123,456,789", locale = locale(decimal_mark = "."))
read_csv2("a;b\n1,0;2,0")
d1 <- "January 1, 2010"
d2 <- "2015-Mar-07"
d3 <- "06-Jun-2017"
d4 <- c("August 19 (2015)", "July 1 (2015)")
d5 <- "12/30/14" # Dec 30, 2014
t1 <- "1705"
t2 <- "11:15:10.12 PM"
parse_date(d1, "%B %d, %Y")
parse_date(d2, "%Y-%b-%d")
parse_date(d3, "%d-%b-%Y")
parse_date(d4, "%B %d (%Y)")
parse_date(d5, "%m/%d/%y")
parse_time(t1, "%H%M")
parse_time(t2, "%I:%M:%OS %p")
table1
library(tidyverse)
table1
table2
table3
class(table3$rate)
table4
table4a
table4b
table2
?spread
table2 %>%
spread(key = type, value = count)
table2 %>%
spread(key = type, value = count) %>%
mutate(rate = cases/population * 10000)
table4a
table4b
table4a %>%
gather()
table4a %>%
gather(key = country)
?gather
table4a %>%
gather(key = year, value = count, `1999`, `2000`)
table4b %>%
gather(key = year, value = count, `1999`, `2000`)
table4a_2 <- table4a %>%
gather(key = year, value = cases, `1999`, `2000`)
table4b_2 <- table4b %>%
gather(key = year, value = population, `1999`, `2000`)
table4 <- merge(table4a_2, table4b_2)
table4 %>%
mutate(rate = cases/population * 10000)
ggplot(table1, aes(year, cases)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
table2 %>%
spread(key = type, value = count)
table2 %>%
spread(key = type, value = count) %>%
ggplot(aes(year, cases)) +
geom_line(aes(group = country), colour = "grey50") +
geom_point(aes(colour = country))
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
spread(year, return) %>%
gather("year", "return", `2015`:`2016`)
stocks %>%
spread(year, return)
stocks
?spread
?gather
table4a %>%
gather(1999, 2000, key = "year", value = "cases")
table4a
table4a %>%
gather(`1999`, `2000`, key = "year", value = "cases")
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people %>% spread()
people %>% spread(key = key)
spread(people, key, value)
preg <- tribble(
~pregnant, ~male, ~female,
"yes",     NA,    10,
"no",      20,    12
)
preg %>%
gather(key = pregnant)
preg %>%
gather(key = pregnant, value = count)
preg %>%
gather(key = gender, value = count)
preg %>%
gather(key = pregnant, value = count)
preg %>%
gather(male, female, key = pregnant, value = count)
preg %>%
gather(male, female)
preg %>%
gather(male, female, key = pregnant)
preg %>%
spread(male, female, key = pregnant)
preg %>%
spread()
preg %>%
gather()
preg %>%
gather(key = gender, value = number, male, female)
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j")) %>%
separate(x, c("one", "two", "three"))
?separate
tibble(x = c("a,b,c", "d,e,f,g", "h,i,j"))
tibble(x = c("a,b,c", "d,e", "f,g,i"))
tibble(x = c("a,b,c", "d,e", "f,g,i")) %>%
separate(x, c("one", "two", "three"))
?extract
?separate
?spread
?complete
?fill
who
table(who$new_ep_f5564)
table(is.na(who$new_ep_f5564))
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel"))
who %>%
group_by(country, sio2, iso3) %>%
mutate(freq = n())
who %>%
group_by(country, iso2, iso3) %>%
mutate(freq = n())
who %>%
group_by(country, iso2, iso3) %>%
summarise(freq = n())
who %>%
group_by(country, iso2, iso3) %>%
summarise(freq = n()) %>%
group_by(country) %>%
summarise(freq2 = n())
who %>%
group_by(country, iso2, iso3) %>%
summarise(freq = n()) %>%
group_by(country) %>%
summarise(freq2 = n()) %>%
filter(freq2 > 1)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n())
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) + geom_point() + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) + geom_point(color = country) + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n())
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) + geom_point(fill = country) + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count, color = country)) + geom_point() + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) + geom_line(group = country) + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count, group = country)) + geom_line() + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) + geom_line() + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) + geom_point() + facet_wrap(~sex)
who %>%
gather(key, value, new_sp_m014:newrel_f65, na.rm = TRUE) %>%
mutate(key = stringr::str_replace(key, "newrel", "new_rel")) %>%
separate(key, c("new", "var", "sexage")) %>%
select(-new, -iso2, -iso3) %>%
separate(sexage, c("sex", "age"), sep = 1) %>%
group_by(country, year, sex) %>%
summarise(count = n()) %>%
ggplot(aes(year, count)) + geom_point() + facet_wrap(~sex) + theme_bw()
filghts
flights
library(nycflights13)
flights
planes
?join
flights %>%
#group_by(month,day) %>%
left_join(., planes, by = tailnum)
flights
flights %>%
#group_by(month,day) %>%
left_join(flights, planes, by = tailnum)
left_join(flights, planes, by = tailnum)
flights
planes
flights %>%
#group_by(month,day) %>%
left_join(select(planes, tailnum, seats))
flights %>%
left_join(select(planes, tailnum, seats)) %>%
group_by(month,day) %>%
summarise(n_seats = sum(seats))
flights %>%
left_join(select(planes, tailnum, seats)) %>%
group_by(month,day) %>%
summarise(n_seats = sum(seats), na.rm = TRUE)
flights %>%
left_join(select(planes, tailnum, seats)) %>%
group_by(month,day) %>%
summarise(n_seats = sum(seats, na.rm = TRUE))
?arrange
flights %>%
left_join(select(planes, tailnum, seats)) %>%
group_by(month,day) %>%
summarise(n_seats = sum(seats, na.rm = TRUE)) %>%
arrange(desc(n_seats))
flights %>%
left_join(select(planes, tailnum, seats)) %>%
group_by(month,day) %>%
summarise(n_seats = sum(seats, na.rm = TRUE)) %>%
arrange(n_seats)
flights %>%
left_join(select(planes, tailnum, seats)) %>%
group_by(origin, month,day) %>%
summarise(n_seats = sum(seats, na.rm = TRUE)) %>%
arrange(n_seats)
flights %>%
left_join(select(planes, tailnum, seats)) %>%
group_by(month,day) %>%
summarise(n_seats = sum(seats, na.rm = TRUE)) %>%
arrange(n_seats)
flights %>%
mutate(id = row_number())
Lahman
install.packages(c("Lahman", "babynames", "nasaweather", "fueleconomy"))
library(Lahman)
library(babynames)
library(nasaweather)
library(fueleconomy)
Lahman::Batting
Lahman::Batting %>%
count(playerID)
Lahman::Batting %>%
count(playerID, year) %>%
filter(n > 1)
Lahman::Batting %>%
count(playerID, yearID) %>%
filter(n > 1)
?Batting
Lahman::Batting %>%
count(playerID, yearID, stint) %>%
filter(n > 1)
head(babynames)
babynames::babynames %>%
count(year, sex, name) %>%
filter(n > 1)
babynames::babynames %>%
count(year, sex, name)
babynames::babynames %>%
count(year, sex, name) %>%
filter(nn > 1)
babynames::babynames %>%
count(year, name) %>%
filter(nn > 1)
head(atmos)
nasaweather::atmos %>%
count(lat, long, year, month) %>%
filter(n > 1)
nasaweather::atmos %>%
count(lat, year, month) %>%
filter(n > 1)
head(vehicles)
fueleconomy::vehicles %>%
count(id) %>%
filter(n > 1)
head(diamonds)
ggplot2::diamonds %>%
count(carat, cut) %>%
filter(n > 1)
ggplot2::diamonds %>%
count(carat, cut, color) %>%
filter(n > 1)
ggplot2::diamonds %>%
count(carat, cut, color, clarity) %>%
filter(n > 1)
ggplot2::diamonds %>%
count(x,y,z) %>%
filter(n > 1)
batting
BAtting
Batting
Master
Master
?Master
?Salaries
?Managers
?AwardsManagers
AwardsManagers
head(AwardsManagers)
head(Managers)
head(Master)
head(Batting)
head(Pitching)
head(Fielding)
?fielding
?Fielding
